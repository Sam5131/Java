Program: FunctionCalls.java
The call stack contains [main,apple,banana,mango]
main executes to print
mango executes to print
banana executes to print
apple executes to print
mango executes to print
main executes to print

Program: Factorial.java
the integer n calls the factorial function for n-1
the integer n-1 calls the factorial function for n-2
in this manner the calls are made till 1 or 0
where base case is hit and 1 is returned and next lines aren't executed
it is then multiplied by the nth level n * fact(n-1)
then returned to the main function for display

Program: SubsetsSum.java
initial call from main fn (0, {5,2,1}, 0),
1. recursive call:
    digit = 5
    initial call from 1. RC fn (1, {5,2,1}, 0)
    1.1 RC:
        digit = 2
        initial call from 1.1 RC fn (2,{5,2,1},0)
        1.1.1 RC:
            digit = 1
            initial call form 1.1.1 RC fn (3,{5,2,1},0)
            but i == arr.length i.e. 3
            PRINT 0
        1.1.2 RC:
            digit = 1
            call from 1.1.2 RC (3,{5,2,1}, 0 + 1)
            i == arr.length
            PRINT 1
    1.2 RC:
        digit = 2
        call from 1.2 RC fn (2, {5, 2, 1}, 0 + 2)
        1.2.1 RC:
            digit = 1
            call from 1.2.1 RC fn (3, {5,2,1}, 0 + 2)
            i == arr.length
            PRINT 2
        1.2.2 RC:
            digit = 1
            call from 1.2.2 RC fn (3, {5,2,1}, 0 + 2 + 1)
            PRINT 3

Similarly in the recursive tree:

SumSubsets(0, {5, 2, 1}, 0)
├── Exclude 5: SumSubsets(1, {5, 2, 1}, 0)
│   ├── Exclude 2: SumSubsets(2, {5, 2, 1}, 0)
│   │   ├── Exclude 1: SumSubsets(3, {5, 2, 1}, 0) → Prints 0
│   │   └── Include 1: SumSubsets(3, {5, 2, 1}, 1) → Prints 1
│   └── Include 2: SumSubsets(2, {5, 2, 1}, 2)
│       ├── Exclude 1: SumSubsets(3, {5, 2, 1}, 2) → Prints 2
│       └── Include 1: SumSubsets(3, {5, 2, 1}, 3) → Prints 3
└── Include 5: SumSubsets(1, {5, 2, 1}, 5)
    ├── Exclude 2: SumSubsets(2, {5, 2, 1}, 5)
    │   ├── Exclude 1: SumSubsets(3, {5, 2, 1}, 5) → Prints 5
    │   └── Include 1: SumSubsets(3, {5, 2, 1}, 6) → Prints 6
    └── Include 2: SumSubsets(2, {5, 2, 1}, 7)
        ├── Exclude 1: SumSubsets(3, {5, 2, 1}, 7) → Prints 7
        └── Include 1: SumSubsets(3, {5, 2, 1}, 8) → Prints 8


Program: sumParameterized.java
Input n is taken.
sum call is given with parameter n and sum variable s.
then in the function sum, recursive call is given to sum(n-1,s+n)
then in the call stack [(n,s),(n-1,(n+s)),(n-2,(n+s)+n-1),...(0,s+(n+n-1+n-2+...0))]
For example: with input 5:
n = 5, s = 0
First call sum from main: sum (n:5, s:0)
In sum function:
Recursive call (n: 4,s: 5+0) when n = 5
Recursive call (n: 3,s: 4+5) when n = 4
Recursive call (n: 2,s: 3+9) when n = 3
Recursive call (n: 1,s: 2+12) when n = 2
Recursive call (n: 0,s: 1+14) when n = 1
Recursive call hits base call n = 0 and prints s = 15